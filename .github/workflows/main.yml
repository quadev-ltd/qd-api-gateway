name: Go CI/CD

on:
  push:
    branches:
      - main

jobs:
  sanity-check:
    name: Build and Test
    runs-on: ubuntu-20.04
    container: tavoargento/quadev-go-service:0.0.1  # Specify the Docker image
    env:
      MONGO_DB_VERSION: 4.4.28

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: go mod download

      - name: Run Go Format Check
        run: set -e; gofmt -s -l . | tee /dev/stderr

      - name: Run Go Import Check
        run: set -e; goimports -l . | tee /dev/stderr

      - name: Run Go Lint
        run: set -e; golint ./...

      - name: Add certificates
        run: |
          mkdir certs
          cd certs
          echo "${{ secrets.CA_PEM }}" | base64 -d > ca.pem
          cd -

      - name: Run Unit Tests
        run: go test -v ./...

      - name: Build
        run: go build cmd/main.go

  build-and-push:
    needs: sanity-check
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::116203835544:role/Github-ECR-Docker
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Add certificates
        run: |
          mkdir certs
          cd certs
          echo "${{ secrets.CA_PEM }}" | base64 -d > ca.pem
          cd -  
  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: 116203835544.dkr.ecr.eu-west-1.amazonaws.com
          REPOSITORY: dev.qd-api-gateway
          IMAGE_TAG: 0.0.0
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cleanup
        run: |
          docker image prune -f