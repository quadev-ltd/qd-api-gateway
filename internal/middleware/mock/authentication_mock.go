// Code generated by MockGen. DO NOT EDIT.
// Source: internal/middleware/authentication.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceClienter is a mock of ServiceClienter interface.
type MockServiceClienter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClienterMockRecorder
}

// MockServiceClienterMockRecorder is the mock recorder for MockServiceClienter.
type MockServiceClienterMockRecorder struct {
	mock *MockServiceClienter
}

// NewMockServiceClienter creates a new mock instance.
func NewMockServiceClienter(ctrl *gomock.Controller) *MockServiceClienter {
	mock := &MockServiceClienter{ctrl: ctrl}
	mock.recorder = &MockServiceClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClienter) EXPECT() *MockServiceClienterMockRecorder {
	return m.recorder
}

// GetPublicKey mocks base method.
func (m *MockServiceClienter) GetPublicKey(ctx context.Context) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockServiceClienterMockRecorder) GetPublicKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockServiceClienter)(nil).GetPublicKey), ctx)
}

// MockAutheticationMiddlewarer is a mock of AutheticationMiddlewarer interface.
type MockAutheticationMiddlewarer struct {
	ctrl     *gomock.Controller
	recorder *MockAutheticationMiddlewarerMockRecorder
}

// MockAutheticationMiddlewarerMockRecorder is the mock recorder for MockAutheticationMiddlewarer.
type MockAutheticationMiddlewarerMockRecorder struct {
	mock *MockAutheticationMiddlewarer
}

// NewMockAutheticationMiddlewarer creates a new mock instance.
func NewMockAutheticationMiddlewarer(ctrl *gomock.Controller) *MockAutheticationMiddlewarer {
	mock := &MockAutheticationMiddlewarer{ctrl: ctrl}
	mock.recorder = &MockAutheticationMiddlewarerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutheticationMiddlewarer) EXPECT() *MockAutheticationMiddlewarerMockRecorder {
	return m.recorder
}

// RefreshAuthentication mocks base method.
func (m *MockAutheticationMiddlewarer) RefreshAuthentication(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshAuthentication", ctx)
}

// RefreshAuthentication indicates an expected call of RefreshAuthentication.
func (mr *MockAutheticationMiddlewarerMockRecorder) RefreshAuthentication(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthentication", reflect.TypeOf((*MockAutheticationMiddlewarer)(nil).RefreshAuthentication), ctx)
}

// RequireAuthentication mocks base method.
func (m *MockAutheticationMiddlewarer) RequireAuthentication(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequireAuthentication", ctx)
}

// RequireAuthentication indicates an expected call of RequireAuthentication.
func (mr *MockAutheticationMiddlewarerMockRecorder) RequireAuthentication(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthentication", reflect.TypeOf((*MockAutheticationMiddlewarer)(nil).RequireAuthentication), ctx)
}

// RequirePaidFeatures mocks base method.
func (m *MockAutheticationMiddlewarer) RequirePaidFeatures(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequirePaidFeatures", ctx)
}

// RequirePaidFeatures indicates an expected call of RequirePaidFeatures.
func (mr *MockAutheticationMiddlewarerMockRecorder) RequirePaidFeatures(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequirePaidFeatures", reflect.TypeOf((*MockAutheticationMiddlewarer)(nil).RequirePaidFeatures), ctx)
}
