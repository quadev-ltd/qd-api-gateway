// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quadev-ltd/qd-common/pb/gen/go/pb_authentication (interfaces: AuthenticationServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb_authentication "github.com/quadev-ltd/qd-common/pb/gen/go/pb_authentication"
	grpc "google.golang.org/grpc"
)

// MockAuthenticationServiceClient is a mock of AuthenticationServiceClient interface.
type MockAuthenticationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceClientMockRecorder
}

// MockAuthenticationServiceClientMockRecorder is the mock recorder for MockAuthenticationServiceClient.
type MockAuthenticationServiceClientMockRecorder struct {
	mock *MockAuthenticationServiceClient
}

// NewMockAuthenticationServiceClient creates a new mock instance.
func NewMockAuthenticationServiceClient(ctrl *gomock.Controller) *MockAuthenticationServiceClient {
	mock := &MockAuthenticationServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationServiceClient) EXPECT() *MockAuthenticationServiceClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationServiceClient) Authenticate(arg0 context.Context, arg1 *pb_authentication.AuthenticateRequest, arg2 ...grpc.CallOption) (*pb_authentication.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(*pb_authentication.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationServiceClientMockRecorder) Authenticate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).Authenticate), varargs...)
}

// AuthenticateWithFirebase mocks base method.
func (m *MockAuthenticationServiceClient) AuthenticateWithFirebase(arg0 context.Context, arg1 *pb_authentication.AuthenticateWithFirebaseRequest, arg2 ...grpc.CallOption) (*pb_authentication.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticateWithFirebase", varargs...)
	ret0, _ := ret[0].(*pb_authentication.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithFirebase indicates an expected call of AuthenticateWithFirebase.
func (mr *MockAuthenticationServiceClientMockRecorder) AuthenticateWithFirebase(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithFirebase", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).AuthenticateWithFirebase), varargs...)
}

// DeleteAccount mocks base method.
func (m *MockAuthenticationServiceClient) DeleteAccount(arg0 context.Context, arg1 *pb_authentication.DeleteAccountRequest, arg2 ...grpc.CallOption) (*pb_authentication.BaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*pb_authentication.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAuthenticationServiceClientMockRecorder) DeleteAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).DeleteAccount), varargs...)
}

// ForgotPassword mocks base method.
func (m *MockAuthenticationServiceClient) ForgotPassword(arg0 context.Context, arg1 *pb_authentication.ForgotPasswordRequest, arg2 ...grpc.CallOption) (*pb_authentication.BaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForgotPassword", varargs...)
	ret0, _ := ret[0].(*pb_authentication.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockAuthenticationServiceClientMockRecorder) ForgotPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).ForgotPassword), varargs...)
}

// GetPublicKey mocks base method.
func (m *MockAuthenticationServiceClient) GetPublicKey(arg0 context.Context, arg1 *pb_authentication.GetPublicKeyRequest, arg2 ...grpc.CallOption) (*pb_authentication.GetPublicKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKey", varargs...)
	ret0, _ := ret[0].(*pb_authentication.GetPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockAuthenticationServiceClientMockRecorder) GetPublicKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).GetPublicKey), varargs...)
}

// GetUserProfile mocks base method.
func (m *MockAuthenticationServiceClient) GetUserProfile(arg0 context.Context, arg1 *pb_authentication.GetUserProfileRequest, arg2 ...grpc.CallOption) (*pb_authentication.GetUserProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProfile", varargs...)
	ret0, _ := ret[0].(*pb_authentication.GetUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockAuthenticationServiceClientMockRecorder) GetUserProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).GetUserProfile), varargs...)
}

// RefreshToken mocks base method.
func (m *MockAuthenticationServiceClient) RefreshToken(arg0 context.Context, arg1 *pb_authentication.RefreshTokenRequest, arg2 ...grpc.CallOption) (*pb_authentication.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshToken", varargs...)
	ret0, _ := ret[0].(*pb_authentication.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthenticationServiceClientMockRecorder) RefreshToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).RefreshToken), varargs...)
}

// Register mocks base method.
func (m *MockAuthenticationServiceClient) Register(arg0 context.Context, arg1 *pb_authentication.RegisterRequest, arg2 ...grpc.CallOption) (*pb_authentication.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*pb_authentication.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthenticationServiceClientMockRecorder) Register(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).Register), varargs...)
}

// ResendEmailVerification mocks base method.
func (m *MockAuthenticationServiceClient) ResendEmailVerification(arg0 context.Context, arg1 *pb_authentication.ResendEmailVerificationRequest, arg2 ...grpc.CallOption) (*pb_authentication.BaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendEmailVerification", varargs...)
	ret0, _ := ret[0].(*pb_authentication.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendEmailVerification indicates an expected call of ResendEmailVerification.
func (mr *MockAuthenticationServiceClientMockRecorder) ResendEmailVerification(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendEmailVerification", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).ResendEmailVerification), varargs...)
}

// ResetPassword mocks base method.
func (m *MockAuthenticationServiceClient) ResetPassword(arg0 context.Context, arg1 *pb_authentication.ResetPasswordRequest, arg2 ...grpc.CallOption) (*pb_authentication.BaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPassword", varargs...)
	ret0, _ := ret[0].(*pb_authentication.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockAuthenticationServiceClientMockRecorder) ResetPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).ResetPassword), varargs...)
}

// UpdateUserProfile mocks base method.
func (m *MockAuthenticationServiceClient) UpdateUserProfile(arg0 context.Context, arg1 *pb_authentication.UpdateUserProfileRequest, arg2 ...grpc.CallOption) (*pb_authentication.UpdateUserProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserProfile", varargs...)
	ret0, _ := ret[0].(*pb_authentication.UpdateUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockAuthenticationServiceClientMockRecorder) UpdateUserProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).UpdateUserProfile), varargs...)
}

// VerifyEmail mocks base method.
func (m *MockAuthenticationServiceClient) VerifyEmail(arg0 context.Context, arg1 *pb_authentication.VerifyEmailRequest, arg2 ...grpc.CallOption) (*pb_authentication.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyEmail", varargs...)
	ret0, _ := ret[0].(*pb_authentication.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockAuthenticationServiceClientMockRecorder) VerifyEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).VerifyEmail), varargs...)
}

// VerifyResetPasswordToken mocks base method.
func (m *MockAuthenticationServiceClient) VerifyResetPasswordToken(arg0 context.Context, arg1 *pb_authentication.VerifyResetPasswordTokenRequest, arg2 ...grpc.CallOption) (*pb_authentication.VerifyResetPasswordTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyResetPasswordToken", varargs...)
	ret0, _ := ret[0].(*pb_authentication.VerifyResetPasswordTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyResetPasswordToken indicates an expected call of VerifyResetPasswordToken.
func (mr *MockAuthenticationServiceClientMockRecorder) VerifyResetPasswordToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResetPasswordToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).VerifyResetPasswordToken), varargs...)
}
