// Code generated by MockGen. DO NOT EDIT.
// Source: internal/authentication/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceClienter is a mock of ServiceClienter interface.
type MockServiceClienter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClienterMockRecorder
}

// MockServiceClienterMockRecorder is the mock recorder for MockServiceClienter.
type MockServiceClienterMockRecorder struct {
	mock *MockServiceClienter
}

// NewMockServiceClienter creates a new mock instance.
func NewMockServiceClienter(ctrl *gomock.Controller) *MockServiceClienter {
	mock := &MockServiceClienter{ctrl: ctrl}
	mock.recorder = &MockServiceClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClienter) EXPECT() *MockServiceClienterMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockServiceClienter) Authenticate(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authenticate", ctx)
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockServiceClienterMockRecorder) Authenticate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockServiceClienter)(nil).Authenticate), ctx)
}

// AuthenticateWithFirebase mocks base method.
func (m *MockServiceClienter) AuthenticateWithFirebase(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthenticateWithFirebase", ctx)
}

// AuthenticateWithFirebase indicates an expected call of AuthenticateWithFirebase.
func (mr *MockServiceClienterMockRecorder) AuthenticateWithFirebase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithFirebase", reflect.TypeOf((*MockServiceClienter)(nil).AuthenticateWithFirebase), ctx)
}

// DeleteAccount mocks base method.
func (m *MockServiceClienter) DeleteAccount(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAccount", ctx)
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockServiceClienterMockRecorder) DeleteAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockServiceClienter)(nil).DeleteAccount), ctx)
}

// ForgotPassword mocks base method.
func (m *MockServiceClienter) ForgotPassword(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForgotPassword", ctx)
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockServiceClienterMockRecorder) ForgotPassword(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockServiceClienter)(nil).ForgotPassword), ctx)
}

// GetPublicKey mocks base method.
func (m *MockServiceClienter) GetPublicKey(ctx context.Context) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockServiceClienterMockRecorder) GetPublicKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockServiceClienter)(nil).GetPublicKey), ctx)
}

// GetUserProfile mocks base method.
func (m *MockServiceClienter) GetUserProfile(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserProfile", ctx)
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockServiceClienterMockRecorder) GetUserProfile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockServiceClienter)(nil).GetUserProfile), ctx)
}

// RefreshToken mocks base method.
func (m *MockServiceClienter) RefreshToken(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshToken", ctx)
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceClienterMockRecorder) RefreshToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockServiceClienter)(nil).RefreshToken), ctx)
}

// Register mocks base method.
func (m *MockServiceClienter) Register(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", ctx)
}

// Register indicates an expected call of Register.
func (mr *MockServiceClienterMockRecorder) Register(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceClienter)(nil).Register), ctx)
}

// ResendEmailVerification mocks base method.
func (m *MockServiceClienter) ResendEmailVerification(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResendEmailVerification", ctx)
}

// ResendEmailVerification indicates an expected call of ResendEmailVerification.
func (mr *MockServiceClienterMockRecorder) ResendEmailVerification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendEmailVerification", reflect.TypeOf((*MockServiceClienter)(nil).ResendEmailVerification), ctx)
}

// ResetPassword mocks base method.
func (m *MockServiceClienter) ResetPassword(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPassword", ctx)
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockServiceClienterMockRecorder) ResetPassword(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockServiceClienter)(nil).ResetPassword), ctx)
}

// UpdateUserProfile mocks base method.
func (m *MockServiceClienter) UpdateUserProfile(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserProfile", ctx)
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockServiceClienterMockRecorder) UpdateUserProfile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockServiceClienter)(nil).UpdateUserProfile), ctx)
}

// VerifyEmail mocks base method.
func (m *MockServiceClienter) VerifyEmail(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyEmail", ctx)
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockServiceClienterMockRecorder) VerifyEmail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockServiceClienter)(nil).VerifyEmail), ctx)
}

// VerifyResetPasswordToken mocks base method.
func (m *MockServiceClienter) VerifyResetPasswordToken(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyResetPasswordToken", ctx)
}

// VerifyResetPasswordToken indicates an expected call of VerifyResetPasswordToken.
func (mr *MockServiceClienterMockRecorder) VerifyResetPasswordToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResetPasswordToken", reflect.TypeOf((*MockServiceClienter)(nil).VerifyResetPasswordToken), ctx)
}
